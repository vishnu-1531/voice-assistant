import string
import secrets

try:
    import pyperclip  # For clipboard integration (optional)
    clipboard_enabled = True
except ImportError:
    clipboard_enabled = False

def get_user_input():
    print("=== Password Generator ===")
    try:
        length = int(input("Enter desired password length (min 4): "))
        if length < 4:
            raise ValueError("Password length must be at least 4.")
    except ValueError as e:
        print(f"Error: {e}")
        return None

    include_letters = input("Include letters? (y/n): ").strip().lower() == 'y'
    include_numbers = input("Include numbers? (y/n): ").strip().lower() == 'y'
    include_symbols = input("Include symbols? (y/n): ").strip().lower() == 'y'

    if not any([include_letters, include_numbers, include_symbols]):
        print("Error: You must include at least one character type.")
        return None

    exclude_chars = input("Enter characters to exclude (or leave blank): ").strip()

    return length, include_letters, include_numbers, include_symbols, exclude_chars

def build_character_pool(include_letters, include_numbers, include_symbols, exclude_chars):
    characters = ''
    if include_letters:
        characters += string.ascii_letters
    if include_numbers:
        characters += string.digits
    if include_symbols:
        characters += string.punctuation

    # Remove excluded characters
    characters = ''.join(c for c in characters if c not in exclude_chars)
    return characters

def generate_secure_password(length, pool, include_letters, include_numbers, include_symbols):
    password = []

    # Ensure at least one character of each selected type (security rule)
    if include_letters:
        password.append(secrets.choice(string.ascii_letters))
    if include_numbers:
        password.append(secrets.choice(string.digits))
    if include_symbols:
        password.append(secrets.choice(string.punctuation))

    # Fill the rest
    while len(password) < length:
        password.append(secrets.choice(pool))

    # Shuffle password to remove predictable patterns
    secrets.SystemRandom().shuffle(password)
    return ''.join(password[:length])

def main():
    user_input = get_user_input()
    if not user_input:
        return

    length, use_letters, use_numbers, use_symbols, exclude_chars = user_input
    pool = build_character_pool(use_letters, use_numbers, use_symbols, exclude_chars)

    if not pool:
        print("Error: Character pool is empty after exclusions.")
        return

    password = generate_secure_password(length, pool, use_letters, use_numbers, use_symbols)
    print(f"\nGenerated Password: {password}")

    # Clipboard integration (optional)
    if clipboard_enabled:
        pyperclip.copy(password)
        print("Password copied to clipboard.")
    else:
        print("Install 'pyperclip' module to enable clipboard support.")

if __name__ == "__main__":
    main()
